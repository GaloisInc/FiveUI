<!DOCTYPE html>
<html>
<!--
Copyright 2011 The Closure Library Authors. All Rights Reserved.

Use of this source code is governed by the Apache License, Version 2.0.
See the COPYING file for details.
-->
<!--
-->
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>Closure Unit Tests - goog.ui.ModalPopup</title>
<script src="../base.js"></script>
<script>
  goog.require('goog.ui.ModalPopup');
  goog.require('goog.dispose');
  goog.require('goog.dom');
  goog.require('goog.events');
  goog.require('goog.style');
  goog.require('goog.ui.PopupBase.EventType');
  goog.require('goog.testing.jsunit');
</script>
</head>
<body>
<script>


var popup;


function setUp() {
}


function tearDown() {
  goog.dispose(popup);
}


function testDispose() {
  popup = new goog.ui.ModalPopup();
  popup.render();

  goog.dispose(popup);
  assertNull(goog.dom.getElementByClass('goog-modalpopup-bg'));
  assertNull(goog.dom.getElementByClass('goog-modalpopup'));
  assertEquals(0, goog.dom.getElementsByTagNameAndClass('span').length);
}


function testRenderWithoutIframeMask() {
  popup = new goog.ui.ModalPopup();
  popup.render();

  assertEquals(0, goog.dom.getElementsByTagNameAndClass(
      'iframe', 'goog-modalpopup-bg').length);

  var bg = goog.dom.getElementsByTagNameAndClass('div', 'goog-modalpopup-bg');
  assertEquals(1, bg.length);
  var content = goog.dom.getElementByClass('goog-modalpopup');
  assertNotNull(content);
  var tabCatcher = goog.dom.getElementsByTagNameAndClass('span');
  assertEquals(1, tabCatcher.length);

  assertTrue(goog.dom.compareNodeOrder(bg[0], content) < 0);
  assertTrue(goog.dom.compareNodeOrder(content, tabCatcher[0]) < 0);
}


function testRenderWithIframeMask() {
  popup = new goog.ui.ModalPopup(true);
  popup.render();

  var iframe = goog.dom.getElementsByTagNameAndClass(
      'iframe', 'goog-modalpopup-bg');
  assertEquals(1, iframe.length);
  var bg = goog.dom.getElementsByTagNameAndClass('div', 'goog-modalpopup-bg');
  assertEquals(1, bg.length);
  var content = goog.dom.getElementByClass('goog-modalpopup');
  assertNotNull(content);
  var tabCatcher = goog.dom.getElementsByTagNameAndClass('span');
  assertEquals(1, tabCatcher.length);

  assertTrue(goog.dom.compareNodeOrder(iframe[0], bg[0]) < 0);
  assertTrue(goog.dom.compareNodeOrder(bg[0], content) < 0);
  assertTrue(goog.dom.compareNodeOrder(content, tabCatcher[0]) < 0);
}


function testRenderDoesNotShowAnyElement() {
  popup = new goog.ui.ModalPopup(true);
  popup.render();

  var iframe = goog.dom.getElementsByTagNameAndClass(
      'iframe', 'goog-modalpopup-bg');
  assertFalse(goog.style.isElementShown(iframe[0]));
  var bg = goog.dom.getElementsByTagNameAndClass('div', 'goog-modalpopup-bg');
  assertFalse(goog.style.isElementShown(bg[0]));
  assertFalse(goog.style.isElementShown(
      goog.dom.getElementByClass('goog-modalpopup')));
  var tabCatcher = goog.dom.getElementsByTagNameAndClass('span');
  assertFalse(goog.style.isElementShown(tabCatcher[0]));
}


function testIframeOpacityIsSetToZero() {
  popup = new goog.ui.ModalPopup(true);
  popup.render();

  var iframe = goog.dom.getElementsByTagNameAndClass(
      'iframe', 'goog-modalpopup-bg')[0];
  assertEquals(0, goog.style.getOpacity(iframe));
}


function testEventFiredOnShow() {
  popup = new goog.ui.ModalPopup(true);
  popup.render();

  var beforeShowCallCount = 0;
  var beforeShowHandler = function() {
    beforeShowCallCount++;
  };
  var showCallCount = false;
  var showHandler = function() {
    assertEquals('BEFORE_SHOW is not dispatched before SHOW',
        1, beforeShowCallCount);
    showCallCount++;
  };

  goog.events.listen(
      popup, goog.ui.PopupBase.EventType.BEFORE_SHOW, beforeShowHandler);
  goog.events.listen(popup, goog.ui.PopupBase.EventType.SHOW, showHandler);

  popup.setVisible(true);

  assertEquals(1, beforeShowCallCount);
  assertEquals(1, showCallCount);
}


function testEventFiredOnHide() {
  popup = new goog.ui.ModalPopup(true);
  popup.render();
  popup.setVisible(true);

  var beforeHideCallCount = 0;
  var beforeHideHandler = function() {
    beforeHideCallCount++;
  };
  var hideCallCount = false;
  var hideHandler = function() {
    assertEquals('BEFORE_HIDE is not dispatched before HIDE',
        1, beforeHideCallCount);
    hideCallCount++;
  };

  goog.events.listen(
      popup, goog.ui.PopupBase.EventType.BEFORE_HIDE, beforeHideHandler);
  goog.events.listen(popup, goog.ui.PopupBase.EventType.HIDE, hideHandler);

  popup.setVisible(false);

  assertEquals(1, beforeHideCallCount);
  assertEquals(1, hideCallCount);
}


</script>
</body>
</html>
